name: 'Claude Code Actions for YassLab team'
description: 'YassLabÁî®„Å´„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åï„Çå„Åü Claude AI „Ç≥„Éº„Éâ„É¨„Éì„É•„Éº'
author: 'YassLab Inc.'

branding:
  icon:  'message-circle'
  color: 'blue'

# Docs: https://github.com/anthropics/claude-code-action#readme
inputs:
  additional_permissions:
    description: 'Tell Claude that you are allowed to do given permissions (e.g. Can read CI results)'
    required: false
    default: |
      actions: read

  claude_code_oauth_token:
    description: 'Claude Code API Token'
    required: true

  direct_prompt:
    description: 'Direct prompt for automated review (no @claude mention needed)'
    required: false
    default: |
      Always respond in Japanese, even if given instructions are in English.
      Use Japanese for all outputs, explanations, and comments in code.

      Review this pull request and provide constructive feedback on:
      - Best practices on Ruby, Jekyll, or Ruby on Rails.
      - Critical bugs, security concerns, and performance considerations.
      - General principles on YAGNI, UNIX Philosophy, and Premature Optimization.

      Consider the project's context and existing patterns when suggesting changes.
      
      All your outputs have to be organized with collapsed sections by using the <details> tags:
      - üö® ÈáçÂ§ß„Å™ÂïèÈ°å („Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÄÅÁ†¥Â£äÁöÑÂ§âÊõ¥)
      - ‚ö†Ô∏è ÊîπÂñÑÊé®Â•® („Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„ÇπÈÅïÂèç)
      - üí° ÊèêÊ°à  („Çà„ÇäËâØ„ÅÑÂÆüË£ÖÊñπÊ≥ï)
      - ‚úÖ ËâØ„ÅÑÂÆüË£Ö (ÂèÇËÄÉ„Å´„Å™„ÇãÁÆáÊâÄ)

      Note: Include only relevant sections. Skip if no items in a category.
      Reference: https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-collapsed-sections

      Also note that, for now, you can suggest changes by comments but cannot commit/push to GitHub.

  model:
    description: 'Specify model (default: Claude Sonnet 4)'
    required: false
    default: 'claude-opus-4-1-20250805'
    #default: 'claude-opus-4-20250514'

  #trigger_phrase:
  #  description: 'Customize the trigger phrase (default: @claude)'
  #  required: false
  #  default: '@claude'

  #base_branch:
  #  description: '„Éô„Éº„Çπ„Éñ„É©„É≥„ÉÅ'
  #  required: false
  #  default: ''

  #max_turns:
  #  description: 'ÊúÄÂ§ß‰ºöË©±„Çø„Éº„É≥Êï∞'
  #  required: false
  #  default: ''

  #timeout_minutes:
  #  description: '„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºàÂàÜÔºâ'
  #  required: false
  #  default: ''

  allowed_tools:
    description: 'Allow specific tools to exec'
    required: false
    # Ruby Á≥ª„Ç≥„Éû„É≥„Éâ (bundle, rake, rails, rspec, rubocop „Å™„Å©) „Å®„ÄÅREAD Á≥ª„Ç≥„Éû„É≥„Éâ„ÇíË®±ÂèØ
    default: 'Agent,Bash(bundle install:*),Bash(bundle update:*),Bash(bundle exec rake:*),Bash(bundle exec rails:*),Bash(bundle exec rspec:*),Bash(bundle exec rubocop:*),Edit,MultiEdit,Glob,Grep,LS,Read,Task,TodoWrite,WebFetch,WebSearch,Write'
    # Ë¶ÅÊ§úË®é: WRITE Á≥ª„Ç≥„Éû„É≥„Éâ„ÅØÂà∂Èôê„Åô„Çã? ‰æã: Write(spec/**)
    # https://docs.anthropic.com/en/docs/claude-code/settings#tools-available-to-claude

  disallowed_tools:
    description: 'Disallow specific tools to exec'
    required: false
    # PR ÂÜÖ„Åß„ÅÆËá™Âãï„Ç≥„Éü„ÉÉ„Éà„Åä„Çà„Å≥Ê®©ÈôêÂèñÂæó„Ç≥„Éû„É≥„Éâ„Å™„Å©„ÇíÊòéÁ§∫ÁöÑ„Å´Á¶ÅÊ≠¢
    default: 'Bash(git commit:*),Bash(git push:*),Bash(rm -rf:*),Bash(sudo:*)'

  #custom_instructions:
  #  description: '„Ç´„Çπ„Çø„É†ÊåáÁ§∫'
  #  required: false
  #  default: ''          
          
  # Optional: Customize the trigger phrase (default: @claude)
  # trigger_phrase: "/claude"
          
  # Optional: Trigger when specific user is assigned to an issue
  # assignee_trigger: "claude-bot"
          
  # Optional: Allow Claude to run specific commands
  # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          
  # Optional: Add custom instructions for Claude to customize its behavior for your project
  # custom_instructions: |
  #   Follow our coding standards
  #   Ensure all new code has tests
  #   Use TypeScript for new files
          
  # Optional: Custom environment variables for Claude
  # claude_env: |
  #   NODE_ENV: test

  # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
  # use_sticky_comment: true

  # Optional: Customize review based on file types
  # direct_prompt: |
  #   Review this PR focusing on:
  #   - For TypeScript files: Type safety and proper interface usage
  #   - For API endpoints: Security, input validation, and error handling
  #   - For React components: Performance, accessibility, and best practices
  #   - For tests: Coverage, edge cases, and test quality

  # Optional: Different prompts for different authors
  # direct_prompt: |
  #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
  #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
  #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

  # Optional: Add specific tools for running tests or linting
  # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
  #        
  # Optional: Skip review for certain conditions
  # if: |
  #   !contains(github.event.pull_request.title, '[skip-review]') &&
  #   !contains(github.event.pull_request.title, '[WIP]')

runs:
  using: 'composite'
  steps:
    - name:  Check if available members
      id:    auth
      shell: bash
      run: |
        # Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
        USERNAME="${{ github.event.comment.user.login }}"
        echo "::debug::Checking authorization for user: $USERNAME"
        
        # members.json„ÇíÂèñÂæó„Åó„Å¶„É°„É¢„É™ÂÜÖ„ÅßÂá¶ÁêÜ
        if curl -s https://yasslab.jp/members.json | \
           jq -e ".[] | select(.username_github == \"$USERNAME\")" > /dev/null 2>&1; then
          echo "::notice::‚úÖ Authorized YassLab member: $USERNAME"
          echo "authorized=true" >> $GITHUB_OUTPUT
        else
          echo "::warning::‚ùå Not authorized: $USERNAME is not a YassLab member"
          echo "authorized=false" >> $GITHUB_OUTPUT
          exit 0
        fi

    # Docs: https://github.com/anthropics/claude-code-action#readme
    - name: Claude Code Actions
      if: steps.auth.outputs.authorized == 'true'
      uses: anthropics/claude-code-action@beta
      with:
        allowed_tools:           ${{ inputs.allowed_tools }}
        disallowed_tools:        ${{ inputs.disallowed_tools }}
        additional_permissions:  ${{ inputs.additional_permissions }}
        claude_code_oauth_token: ${{ inputs.claude_code_oauth_token }}
        direct_prompt:           ${{ inputs.direct_prompt }}
        model:                   ${{ inputs.model }}
        #trigger_phrase:          ${{ inputs.trigger_phrase }}
        #base_branch:             ${{ inputs.base_branch }}
        #max_turns:               ${{ inputs.max_turns }}
        #timeout_minutes:         ${{ inputs.timeout_minutes }}
        #custom_instructions:     ${{ inputs.custom_instructions }}
